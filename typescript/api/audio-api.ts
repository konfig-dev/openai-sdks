/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTranscriptionResponse } from '../models';
// @ts-ignore
import { CreateTranslationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AudioApi - axios parameter creator
 * @export
 */
export const AudioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transcribes audio into the input language.
         * @param {File} file The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available. 
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranscription: async (file: File, model: string, prompt?: string, responseFormat?: string, temperature?: number, language?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createTranscription', 'file', file)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('createTranscription', 'model', model)
            const localVarPath = `/audio/transcriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration, prefix: "Bearer " })

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (model !== undefined) { 
                localVarFormParams.append('model', model as any);
            }
    
            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (responseFormat !== undefined) { 
                localVarFormParams.append('response_format', responseFormat as any);
            }
    
            if (temperature !== undefined) { 
                localVarFormParams.append('temperature', temperature as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Translates audio into into English.
         * @param {File} file The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available. 
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranslation: async (file: File, model: string, prompt?: string, responseFormat?: string, temperature?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createTranslation', 'file', file)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('createTranslation', 'model', model)
            const localVarPath = `/audio/translations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration, prefix: "Bearer " })

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (model !== undefined) { 
                localVarFormParams.append('model', model as any);
            }
    
            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (responseFormat !== undefined) { 
                localVarFormParams.append('response_format', responseFormat as any);
            }
    
            if (temperature !== undefined) { 
                localVarFormParams.append('temperature', temperature as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioApi - functional programming interface
 * @export
 */
export const AudioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transcribes audio into the input language.
         * @param {AudioApiCreateTranscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTranscription(requestParameters: AudioApiCreateTranscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTranscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTranscription(requestParameters.file, requestParameters.model, requestParameters.prompt, requestParameters.responseFormat, requestParameters.temperature, requestParameters.language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Translates audio into into English.
         * @param {AudioApiCreateTranslationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTranslation(requestParameters: AudioApiCreateTranslationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTranslationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTranslation(requestParameters.file, requestParameters.model, requestParameters.prompt, requestParameters.responseFormat, requestParameters.temperature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioApi - factory interface
 * @export
 */
export const AudioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioApiFp(configuration)
    return {
        /**
         * 
         * @summary Transcribes audio into the input language.
         * @param {AudioApiCreateTranscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranscription(requestParameters: AudioApiCreateTranscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTranscriptionResponse> {
            return localVarFp.createTranscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Translates audio into into English.
         * @param {AudioApiCreateTranslationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranslation(requestParameters: AudioApiCreateTranslationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateTranslationResponse> {
            return localVarFp.createTranslation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTranscription operation in AudioApi.
 * @export
 * @interface AudioApiCreateTranscriptionRequest
 */
export type AudioApiCreateTranscriptionRequest = {
    
    /**
    * The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
    * @type {File}
    * @memberof AudioApiCreateTranscription
    */
    readonly file: File
    
    /**
    * ID of the model to use. Only `whisper-1` is currently available. 
    * @type {string}
    * @memberof AudioApiCreateTranscription
    */
    readonly model: string
    
    /**
    * An optional text to guide the model\\\'s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
    * @type {string}
    * @memberof AudioApiCreateTranscription
    */
    readonly prompt?: string
    
    /**
    * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
    * @type {string}
    * @memberof AudioApiCreateTranscription
    */
    readonly responseFormat?: string
    
    /**
    * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
    * @type {number}
    * @memberof AudioApiCreateTranscription
    */
    readonly temperature?: number
    
    /**
    * The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
    * @type {string}
    * @memberof AudioApiCreateTranscription
    */
    readonly language?: string
    
}

/**
 * Request parameters for createTranslation operation in AudioApi.
 * @export
 * @interface AudioApiCreateTranslationRequest
 */
export type AudioApiCreateTranslationRequest = {
    
    /**
    * The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
    * @type {File}
    * @memberof AudioApiCreateTranslation
    */
    readonly file: File
    
    /**
    * ID of the model to use. Only `whisper-1` is currently available. 
    * @type {string}
    * @memberof AudioApiCreateTranslation
    */
    readonly model: string
    
    /**
    * An optional text to guide the model\\\'s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
    * @type {string}
    * @memberof AudioApiCreateTranslation
    */
    readonly prompt?: string
    
    /**
    * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
    * @type {string}
    * @memberof AudioApiCreateTranslation
    */
    readonly responseFormat?: string
    
    /**
    * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
    * @type {number}
    * @memberof AudioApiCreateTranslation
    */
    readonly temperature?: number
    
}

/**
 * AudioApi - object-oriented interface
 * @export
 * @class AudioApi
 * @extends {BaseAPI}
 */
export class AudioApi extends BaseAPI {
    /**
     * 
     * @summary Transcribes audio into the input language.
     * @param {AudioApiCreateTranscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public createTranscription(requestParameters: AudioApiCreateTranscriptionRequest, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).createTranscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Translates audio into into English.
     * @param {AudioApiCreateTranslationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioApi
     */
    public createTranslation(requestParameters: AudioApiCreateTranslationRequest, options?: AxiosRequestConfig) {
        return AudioApiFp(this.configuration).createTranslation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
